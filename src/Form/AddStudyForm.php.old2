<?php

namespace Drupal\std\Form;

use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Ajax\HtmlCommand;
use Drupal\rep\Utils;
use Drupal\rep\Vocabulary\HASCO;

class AddStudyForm extends FormBase {

  public $pi = [];

  /**
   * {@inheritdoc}
   */
  public function getFormId() {
    return 'add_study_form';
  }

  // Constructor
  //public function __construct() {
  //  $this->pi = ["value1" => "Option 1", "value2" => "Option 2", "value3" => "Option 3"];
  //}

  /**
   * {@inheritdoc}
   */
  public function buildForm(array $form, FormStateInterface $form_state) {
    
    //dpm($form_state->getValue('study_pi'));

    // Add custom CSS for the fieldset.
    $form['#attached']['library'][] = 'std/std_js_css';
  
    $form['study_short_name'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Short Name'),
    ];
    $form['study_name'] = [
      '#type' => 'textfield',
      '#title' => $this->t('Long Name'),
    ];
    $form['study_pi_fieldset'] = [
      '#type' => 'fieldset',
      '#title' => t('PI(s)'),
      '#collapsible' => FALSE, // Optional: Make the fieldset collapsible.
      '#collapsed' => TRUE, // Optional: Expand the fieldset by default.
      '#prefix' => '<div id="pi_fieldset_wrapper" class="my-fieldset-wrapper">', // Add a wrapper div with a custom class.
      '#suffix' => '</div>', // Close the wrapper div.
    ];
  
    $form['study_pi_fieldset']['study_pi_1'] = [
      '#type' => 'textfield',
    ];

    // Placeholder for the 'test' element.
    $form['study_pi_fieldset']['test_wrapper'] = [
      '#markup' => '<div id="test-wrapper"></div>',
    ];

    //$form['study_pi_fieldset']['study_pi_2'] = [
    //  '#type' => 'textfield',
    //  '#attributes' => [
    //    'id' => 'pi_2_wrapper',
    //    'class' => ['pi_2_wrapper'],
    //    'data-position' => '2',
    //  ],
    //  '#ajax' => [
    //    'callback' => '::delete_pi_callback(2)',
    //    'wrapper' => 'pi_2_wrapper', // The ID of the element to be replaced or updated.
    //    'event' => 'click', // Trigger the Ajax callback when the select field changes.
    //  ],    
    //];
    //$form['study_pi_fieldset']['study_pi_3'] = [
    //  '#type' => 'textfield',
    //  '#attributes' => [
    //    'id' => 'pi_3_wrapper',
    //    'class' => ['pi_3_wrapper'],
    //    'data-position' => '3',
    //  ],
    //  '#ajax' => [
    //    'callback' => '::delete_pi_callback(2)',
    //    'wrapper' => 'pi_3_wrapper', // The ID of the element to be replaced or updated.
    //    'event' => 'click', // Trigger the Ajax callback when the select field changes.
    //  ],    
    //];
    $form['study_pi_add'] = [
      '#type' => 'button',
      '#value' => t('Add PI'),
      '#name' => 'add_pi',
      '#attributes' => [
        'class' => ['btn-primary', 'btn-sm'],
      ],
      '#ajax' => [
        'callback' => '::add_pi_callback',
        'wrapper' => 'pi_fieldset_wrapper', // The ID of the element to be replaced or updated.
        'event' => 'click', // Trigger the Ajax callback when the select field changes.
      ],    
    ];
    $form['study_description'] = [
      '#type' => 'textarea',
      '#title' => $this->t('Description'),
    ];
    $form['save_submit'] = [
      '#type' => 'submit',
      '#value' => $this->t('Save'),
      '#name' => 'save',
    ];
    $form['cancel_submit'] = [
      '#type' => 'submit',
      '#value' => $this->t('Cancel'),
      '#name' => 'back',
    ];
    $form['bottom_space'] = [
      '#type' => 'item',
      '#title' => t('<br><br>'),
    ];
    //dpm($form['study_pi_fieldset']);

    return $form;
  }

  public function validateForm(array &$form, FormStateInterface $form_state) {
    $submitted_values = $form_state->cleanValues()->getValues();
    $triggering_element = $form_state->getTriggeringElement();
    $button_name = $triggering_element['#name'];

    if ($button_name === 'save') {
      if(strlen($form_state->getValue('study_short_name')) < 1) {
        $form_state->setErrorByName('study_short_name', $this->t('Please enter a valid short name for the Study'));
      }
      if(strlen($form_state->getValue('study_name')) < 1) {
        $form_state->setErrorByName('study_name', $this->t('Please enter a valid name for the Study'));
      }
    }
  }

  /**
   * Ajax callback function to delete PIs.
   */
  function add_pi_callback(array &$form, FormStateInterface $form_state) {
    
    dpm('in add pi ajax');

    dpm($form['study_pi_fieldset']);
    $fields = $form['study_pi_fieldset'];
    $select = array();
    if ($fields != NULL && is_array($fields)) {
      foreach($fields as $field) {
        if (is_array($field)) {
          if (array_key_exists('#type', $field) && $field['#type'] == 'textfield') {
            $select[] = $field;
          }
        }
        //if ($field['#type'] == 'textfield') {
        //  $select[] = $field;
        //}
      }
    }
    $next = count($select) + 1;
    $nextstr = strval($next);

    dpm($nextstr);

    //if ($new_search_value != NULL) {
      //$form['study_pi_fieldset']['study_pi']['#options'][$new_values] = $new_value;
      //dpm($form_state->getValue('study_pi_search'));
      //$existing_pis[$new_search_value] = $new_search_value;
      //dpm($existing_pis);
      //$form_state->setValue('study_pi',$existing_pis);
      //$form_state->setValue('study_pi_' . $nextstr,'');
      //dpm($form);
      $newContent = '[' .
        '\'#type\' => \'textfield\',' .
        '\'#attributes\' => [' .
          '\'id\' => \'pi_' . $nextstr . '_wrapper\',' .
          '\'class\' => [\'pi_' . $nextstr . '_wrapper\'],' .
          '\'data-position\' => \'' . $nextstr . '\', ' .
        '], ' .
        '\'#ajax\' => [ ' .
          '\'callback\' => \'::delete_pi_callback\',' .
          '\'wrapper\' => \'pi_' . $nextstr . '_wrapper\',' . // The ID of the element to be replaced or updated.
          '\'event\' => \'click\',' . // Trigger the Ajax callback when the select field changes.
        '],' .    
      '];';
      //dpm($newContent);
      //$form['study_pi_fieldset']['study_pi']['#options'] = $existing_pis;
      //dpm($form_state->getValue('study_pi_search'));
      //$form_state->setRebuild();
    //}

    //dpm($form['study_pi_fieldset']['study_pi']['#options']);
    //dpm($selected_value);

    // Return the updated form element.

    // Create an HtmlCommand to replace the content of an element with the ID 'my-element'.
    $commands = [];
    $commands[] = new HtmlCommand('test_wrapper', $newContent);
  
    // Return the commands to be processed.
    return $commands;

    //dpm($form['study_pi_fieldset']);
    //return $form['study_pi_fieldset'];
    //return $form;
  }

  /**
   * Ajax callback function to delete PIs.
   */
  function delete_pi_callback(array &$form, FormStateInterface $form_state) {
    
    //dpm('in delete pi ajax');

    // Get the selected value from the form state.
    $selected_value = $form_state->getValue('study_pi');

    // Remove the selected options from the options array.
    if ($selected_value != NULL && is_array($selected_value)) {
      $keys = array_keys($selected_value);
      if ($keys != NULL && is_array($keys)) {
        foreach ($keys as $key) {
          unset($form['study_pi_fieldset']['study_pi']['#options'][$key]);
        }
      }
    }

    //dpm($selected_value);

    // Return the updated form element.
    return $form['study_pi_fieldset'];
  }

  /**
   * {@inheritdoc}
   */
  public function submitForm(array &$form, FormStateInterface $form_state) {
    $submitted_values = $form_state->cleanValues()->getValues();
    $triggering_element = $form_state->getTriggeringElement();
    $button_name = $triggering_element['#name'];

    if ($button_name === 'add_pi') {
      return;
    } 

    if ($button_name === 'delete_pi') {
      //$selected_value = $form_state->getValue('study_pi');
      //unset($this->pi['value2']);
      dpm('IN SUBMIT FORM');      
      return;
    } 

    if ($button_name === 'back') {
      $form_state->setRedirectUrl(Utils::selectBackUrl('study'));
      return;
    } 

    if ($button_name === 'save') {
      $useremail = \Drupal::currentUser()->getEmail();

      $newStudyUri = Utils::uriGen('study');
      $studyJSON = '{"uri":"'. $newStudyUri .'",'.
          '"typeUri":"'.HASCO::STUDY.'",'.
          '"hascoTypeUri":"'.HASCO::STUDY.'",'.
          '"label":"'.$form_state->getValue('study_short_name').'",'.
          '"title":"'.$form_state->getValue('study_name').'",'.
          '"comment":"'.$form_state->getValue('study_description').'",'.
          '"hasSIRManagerEmail":"'.$useremail.'"}';

      try {
        $api = \Drupal::service('rep.api_connector');
        $message = $api->parseObjectResponse($api->studyAdd($studyJSON),'studyAdd');
        if ($message != null) {
          \Drupal::messenger()->addMessage(t("Study has been added successfully."));
        }
        $form_state->setRedirectUrl(Utils::selectBackUrl('study'));
        return;

      } catch(\Exception $e) {
        \Drupal::messenger()->addMessage(t("An error occurred while adding a study: ".$e->getMessage()));
        $form_state->setRedirectUrl(Utils::selectBackUrl('study'));
        return;
      }
    }

    return;

  }

}